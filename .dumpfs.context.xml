<?xml version="1.0" encoding="UTF-8"?>
<directory_scan timestamp="2025-03-27T19:32:01.412004197+03:00">
  <system_info>
    <hostname>penzu</hostname>
    <os>linux</os>
    <kernel>unix</kernel>
    <git_repository>
      <url>https://github.com/zed-extensions/postgres-context-server</url>
      <host>github.com</host>
      <owner>zed-extensions</owner>
      <name>postgres-context-server</name>
    </git_repository>
  </system_info>
  <directory name="postgres-context-server" path="postgres-context-server">
    <metadata>
      <size>120</size>
      <modified>2025-03-27T19:23:53.127316377+03:00</modified>
      <permissions>755</permissions>
    </metadata>
    <contents>
      <directory name="src" path="postgres-context-server/src">
        <metadata>
          <size>50</size>
          <modified>2025-03-27T19:23:53.127316377+03:00</modified>
          <permissions>755</permissions>
        </metadata>
        <contents>
          <file name="postgres_model_context.rs" path="postgres-context-server/src/postgres_model_context.rs">
            <metadata>
              <size>1774</size>
              <modified>2025-03-27T19:23:53.127316377+03:00</modified>
              <permissions>644</permissions>
            </metadata>
            <content>use serde::Deserialize;
use std::env;
use zed::settings::ContextServerSettings;
use zed_extension_api::{self as zed, serde_json, Command, ContextServerId, Project, Result};

const PACKAGE_NAME: &amp;str = &quot;@zeddotdev/postgres-context-server&quot;;
const PACKAGE_VERSION: &amp;str = &quot;0.1.2&quot;;
const SERVER_PATH: &amp;str = &quot;node_modules/@zeddotdev/postgres-context-server/index.mjs&quot;;

struct PostgresModelContextExtension;

#[derive(Debug, Deserialize)]
struct PostgresContextServerSettings {
    database_url: String,
}

impl zed::Extension for PostgresModelContextExtension {
    fn new() -&gt; Self {
        Self
    }

    fn context_server_command(
        &amp;mut self,
        _context_server_id: &amp;ContextServerId,
        project: &amp;Project,
    ) -&gt; Result&lt;Command&gt; {
        let version = zed::npm_package_installed_version(PACKAGE_NAME)?;
        if version.as_deref() != Some(PACKAGE_VERSION) {
            zed::npm_install_package(PACKAGE_NAME, PACKAGE_VERSION)?;
        }

        let settings = ContextServerSettings::for_project(&quot;postgres-context-server&quot;, project)?;
        let Some(settings) = settings.settings else {
            return Err(&quot;missing `database_url` setting&quot;.into());
        };
        let settings: PostgresContextServerSettings =
            serde_json::from_value(settings).map_err(|e| e.to_string())?;

        Ok(Command {
            command: &quot;node&quot;.to_string(),
            args: vec![
                env::current_dir()
                    .unwrap()
                    .join(SERVER_PATH)
                    .to_string_lossy()
                    .to_string(),
            ],
            env: vec![
                (&quot;DATABASE_URL&quot;.into(), settings.database_url)
            ],
        })
    }
}

zed::register_extension!(PostgresModelContextExtension);
</content>
          </file>
        </contents>
      </directory>
      <file name="Cargo.toml" path="postgres-context-server/Cargo.toml">
        <metadata>
          <size>248</size>
          <modified>2025-03-27T19:23:53.127316377+03:00</modified>
          <permissions>644</permissions>
        </metadata>
        <content>[package]
name = &quot;zed_postgres_model_context&quot;
version = &quot;0.0.1&quot;
edition = &quot;2021&quot;
publish = false
license = &quot;Apache-2.0&quot;

[lib]
path = &quot;src/postgres_model_context.rs&quot;
crate-type = [&quot;cdylib&quot;]

[dependencies]
serde = &quot;1.0&quot;
zed_extension_api = &quot;0.2.0&quot;
</content>
      </file>
      <file name="extension.toml" path="postgres-context-server/extension.toml">
        <metadata>
          <size>344</size>
          <modified>2025-03-27T19:23:53.127316377+03:00</modified>
          <permissions>644</permissions>
        </metadata>
        <content>id = &quot;postgres-context-server&quot;
name = &quot;Postgres Context Server&quot;
description = &quot;Model Context Server for PostgreSQL&quot;
version = &quot;0.0.1&quot;
schema_version = 1
authors = [&quot;Max Brunsfeld &lt;max@zed.dev&gt;&quot;]
repository = &quot;https://github.com/zed-extensions/postgres-context-server&quot;

[context_servers.postgres-context-server]
name = &quot;Postgres Context Server&quot;
</content>
      </file>
      <file name="README.md" path="postgres-context-server/README.md">
        <metadata>
          <size>723</size>
          <modified>2025-03-27T19:23:53.127316377+03:00</modified>
          <permissions>644</permissions>
        </metadata>
        <content># Zed Postgres Context Server

This extension provides a Model Context Server for Postgres, for use with the Zed AI assistant.

It adds a `/pg-schema` slash command to the Assistant Panel.

## Configuration

To use the extension, you will need to point the context server at a Postgres database by setting the `database_url` in your Zed `settings.json`:

```json
{
  &quot;context_servers&quot;: {
    &quot;postgres-context-server&quot;: {
      &quot;settings&quot;: {
        &quot;database_url&quot;: &quot;postgresql://myuser:mypassword@localhost:5432/mydatabase&quot;
      }
    }
  }
}
```

## Usage

- `/pg-schema &lt;table-name&gt;`: Retrieve the schema for the table with the given name.
- `/pg-schema all-tables`: Retrieve the schemas for all tables in the database.
</content>
      </file>
    </contents>
  </directory>
</directory_scan>